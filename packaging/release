#!/usr/bin/env node

/* eslint-disable import/no-extraneous-dependencies, no-console */
const git = require('simple-git');
const util = require('util');
const exec = util.promisify(require('child_process').exec);
const {
  argv: { branch, platform, token, appleIdEmail, appleAppPassword },
} = require('yargs');
const checkVersion = require('./check-version');
const updateRemoteVersion = require('./update-remote');

const release = async () => {
  let releaseVersion;
  const track = branch === 'dev' ? 'alpha' : 'beta';
  console.log(`Platform: ${platform}`);
  console.log(`Branch: ${branch}`);
  if (track) {
    console.log(`Prerelease Track: ${track}`);
  }

  // win-ia32 is run on the same machine right after win-x64, so don't update the version
  if (platform !== 'win32') {
    // Get all tags, sort in desc order, and get latest from current track
    const gitTags = await git().tags();
    const gitTag = gitTags.all.reverse().find((tag) => tag.indexOf(track) > -1);
    console.log(`Last Git tag: ${gitTag}`);

    // Get a new release version and update package.json
    releaseVersion = checkVersion(branch, gitTag);
    console.log(`New release version: ${releaseVersion}`);
  }

  console.log('TODO: stream output for the next command');
  console.log(`npm run dist:${platform}`);
  try {
    const { stdout1 } = await exec(`npm run dist:${platform}`);
    console.log(stdout1);
  } catch (e) {
    console.log(e);
  }

  // Only push git tag if on Travis
  if (platform === 'mac') {
    console.log('Configure Git for Travis CI user');
    await git().raw(['config', '--global', 'user.email', 'travis@travis-ci.org']);
    await git().raw(['config', '--global', 'user.name', 'Travis CI']);
    await git().raw(['config', '--global', 'push.default', 'current']);
    await git().checkout(branch);

    console.log('git tag new version and push');
    await git().addTag(releaseVersion);
    await git().pushTags(`https://${token}@github.com/khalisfoundation/sttm-desktop.git`);
  }

  if (branch === 'release') {
    updateRemoteVersion(platform);
  }

  if (platform === 'mac') {
    console.log('Notarizing app with Apple...');
    try {
      const { stdout } = await exec(
        `xcrun altool --notarize-app --primary-bundle-id "org.khalisfoundation.sttm" --username "${appleIdEmail}" --password "${appleAppPassword}" --file sttm.zip --output-format xml > notarization.plist`,
      );
      console.log(stdout);
      const requestUUID = /<key>RequestUUID<\/key>[\s\S]*?<string>([\w-]+)<\/string>/.exec(
        stdout,
      )[1];
      console.log(`Request UUID: ${requestUUID}`);

      // Wait for notarization to complete
      console.log('Waiting for notarization to complete...');
      const waitForNotarization = async () => {
        const { stdout: notarizationInfo } = await exec(
          `xcrun altool --notarization-info ${requestUUID} --username "${appleIdEmail}" --password "${appleAppPassword}" --output-format xml`,
        );
        const notarizationStatus = /<key>Status<\/key>[\s\S]*?<string>([\w\s]+)<\/string>/.exec(
          notarizationInfo,
        )[1];
        console.log(`Notarization status: ${notarizationStatus}`);
        if (notarizationStatus === 'success') {
          console.log('Notarization succeeded!');
          return;
        }
        if (notarizationStatus === 'invalid' || notarizationStatus === 'failed') {
          throw new Error(`Notarization failed with status: ${notarizationStatus}`);
        }
        console.log('Waiting for 30 seconds...');
        setTimeout(waitForNotarization, 30000);
      };
      await waitForNotarization();
    } catch (error) {
      console.error('Notarization failed:', error);
      process.exit(1);
    }
  }
};

if (branch === 'release' || branch === 'master' || branch === 'dev') {
  release();
}
