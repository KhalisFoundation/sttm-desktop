version: 2.1

executors:
  macos-exec:
    macos:
      xcode: "15.4.0"
    resource_class: macos.m1.medium.gen1
    working_directory: ~/sttmd

jobs:
  build-mac:
    executor: macos-exec
    environment:
      AZURE_STORAGE_ACCOUNT: ${AZURE_STORAGE_ACCOUNT}
      AZURE_STORAGE_CONTAINER: ${AZURE_STORAGE_CONTAINER}
      SAS_TOKEN: ${SAS_TOKEN}
    steps:
      - checkout

      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}

      - run:
          name: Install Azure CLI
          command: |
            brew install azure-cli

      - run:
          name: Ensure Python distutils support
          command: |
            brew install python-setuptools
            python3 -m pip install --upgrade setuptools

      - run:
          name: Verify nvm Installation, Install Node.js v18, Build & Package macOS App
          command: |
            if ! command -v nvm &> /dev/null; then
              echo "nvm could not be found, installing..."
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
              export NVM_DIR="$HOME/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            fi
            [ -s "$HOME/.nvm/nvm.sh" ] && . "$HOME/.nvm/nvm.sh"

            nvm install v18.18.0
            nvm use v18.18.0

            npm install

      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules

      - run:
          name: Import Code Signing Certificate
          environment:
            KEY_CHAIN: "build.keychain"
            CERTIFICATE_P12: "certificate.p12"
          command: |
            nvm use v18.18.0

            # add team id to package.json
            npm run prebuild

            # download the certificate
            curl -sSL "${P12_CERT_LINK}" -o "${CERTIFICATE_P12}"
            openssl pkcs12 -in ${CERTIFICATE_P12} -nodes -legacy -passin pass:"${P12_CERT_PASSWORD}"

            #create a keychain
            security create-keychain -p "${P12_CERT_PASSWORD}" "${KEY_CHAIN}"
            security set-keychain-settings -t 3600 -l "${KEY_CHAIN}"
            security list-keychains -d user -s "${KEY_CHAIN}"

            # Make the keychain the default so identities are found
            security default-keychain -d user -s "${KEY_CHAIN}"
            
            # Unlock the keychain
            security unlock-keychain -p "${P12_CERT_PASSWORD}" "${KEY_CHAIN}"

            security import "${CERTIFICATE_P12}" -k "${KEY_CHAIN}" -P "${P12_CERT_PASSWORD}" -T /usr/bin/codesign;

            security set-key-partition-list -S apple-tool:,apple: -s -k "${P12_CERT_PASSWORD}" "${KEY_CHAIN}"

            npm run pack:macArm
            rm -fr *.p12

      - run:
          name: Rename DMG to fixed name
          command: |
            set -e
            ls builds
            DMG=$(find builds -name "SikhiToTheMax-*-arm64.dmg" | head -n 1)
            if [ -z "$DMG" ]; then
              echo "DMG not found!"
              exit 1
            fi
            echo "Found: $DMG"
            cp "$DMG" SikhiToTheMax-arm64-latest.dmg

      - run:
          name: Verify and Code sign .dmg Signature
          environment:
            DMG_FILE: "SikhiToTheMax-arm64-latest.dmg"
            IDENTITY: "Developer ID Application: Khalis, Inc."
          command: |
            echo "üîë Listing all identities in the keychain..."
            security find-identity -p codesigning -v
            echo "üîë Listing all keychains..."
            security list-keychains -d user

            echo "üîç Verifying DMG signature..."
            if ! codesign --verify --deep --strict "$DMG_FILE"; then
              echo "‚ùå DMG is not properly signed. Attempting to sign it now... $IDENTITY"

              codesign --sign "$IDENTITY" --timestamp --options runtime "$DMG_FILE"

              echo "‚úÖ Signing completed. Re-verifying..."
              if codesign --verify --deep --strict "$DMG_FILE"; then
                echo "üéâ DMG has been successfully signed!"
              else
                echo "üö® Failed to sign DMG properly. Please check codesigning identity and try again."
                exit 1
              fi
            else
              echo "‚úÖ DMG is already properly signed. No action needed."
            fi

      - run:
          name: Upload to Azure Storage
          command: |
            # Upload the DMG file
            az storage blob upload \
              --account-name "${AZURE_STORAGE_ACCOUNT}" \
              --container-name "${AZURE_STORAGE_CONTAINER}" \
              --name "sttm-desktop-builds/SikhiToTheMax-arm64-latest.dmg" \
              --file "SikhiToTheMax-arm64-latest.dmg" \
              --sas-token "${SAS_TOKEN}" \
              --overwrite true || {
                echo "Failed to upload to Azure Storage"
                exit 1
              }

      - run:
          name: Cleanup all build files
          command: |
            ls builds
            echo "Cleaning up build leftovers..."
            rm -rf builds
      
      - store_artifacts:
          path: SikhiToTheMax-arm64-latest.dmg

workflows:
  build:
    jobs:
      - build-mac
