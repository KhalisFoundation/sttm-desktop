name: Build macOS App

on:
  push:
    branches:
      - dev
      - master
      - release
      - github-action

jobs:
  build-mac:
    runs-on: macos-14
    env:
      KEY_CHAIN: build.keychain
      CERTIFICATE_P12: certificate.p12
      IDENTITY: "Developer ID Application: Khalis, Inc."
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set branch tag
        run: |
          if [ "$GITHUB_REF_NAME" = "dev" ]; then
            echo "BRANCH_TAG=alpha" >> $GITHUB_ENV
          elif [ "$GITHUB_REF_NAME" = "master" ]; then
            echo "BRANCH_TAG=beta" >> $GITHUB_ENV
          elif [ "$GITHUB_REF_NAME" = "release" ]; then
            echo "BRANCH_TAG=" >> $GITHUB_ENV
          else
            echo "BRANCH_TAG=$GITHUB_REF_NAME" >> $GITHUB_ENV
          fi

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Create and activate Python virtual environment
        run: |
          python3 -m venv venv-gyp
          source venv-gyp/bin/activate
          python3 -m pip install --upgrade pip
          pip install setuptools wheel

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.18.0'

      - name: Install dependencies
        run: |
          source venv-gyp/bin/activate
          npm install

      - name: Ensure Python distutils support
        run: |
          source venv-gyp/bin/activate
          brew install python-setuptools
          python3 -m pip install --upgrade setuptools

      - name: Import Code Signing Certificate
        run: |
          source venv-gyp/bin/activate
          # Debug CSC_LINK
          if [ -z "${{ secrets.CSC_LINK }}" ]; then
            echo "CSC_LINK is empty!"
            echo "Checking if secret exists..."
            if [ -n "${{ secrets.CSC_LINK }}" ]; then
              echo "CSC_LINK is set but empty"
            else
              echo "CSC_LINK is not set at all"
            fi
            exit 1
          else
            echo "CSC_LINK is set and not empty"
            # Print first few characters to verify it's not just whitespace
            echo "CSC_LINK starts with: ${{ secrets.CSC_LINK }}..."
          fi

          # add team id to package.json
          npm run prebuild

          # download the certificate - handle URL encoding
          echo "Downloading certificate..."
          
          # Decode the URL if it's base64 encoded
          if [[ "${{ secrets.CSC_LINK }}" == *"base64"* ]]; then
            DECODED_URL=$(echo "${{ secrets.CSC_LINK }}" | base64 --decode)
            echo "Decoded URL: ${DECODED_URL}"
            curl -sSL "${DECODED_URL}" -o "${CERTIFICATE_P12}"
          else
            curl -sSL "${{ secrets.CSC_LINK }}" -o "${CERTIFICATE_P12}"
          fi

          # Verify the certificate was downloaded
          if [ ! -f "${CERTIFICATE_P12}" ]; then
            echo "Failed to download certificate"
            exit 1
          fi

          openssl pkcs12 -in ${CERTIFICATE_P12} -nodes -passin pass:"${{ secrets.CSC_KEY_PASSWORD }}"

          #create a keychain
          security create-keychain -p "${{ secrets.CSC_KEY_PASSWORD }}" "${KEY_CHAIN}"
          security set-keychain-settings -t 3600 -l "${KEY_CHAIN}"
          security list-keychains -d user -s "${KEY_CHAIN}"

          # Make the keychain the default so identities are found
          security default-keychain -d user -s "${KEY_CHAIN}"
          
          # Unlock the keychain
          security unlock-keychain -p "${{ secrets.CSC_KEY_PASSWORD }}" "${KEY_CHAIN}"

          security import "${CERTIFICATE_P12}" -k "${KEY_CHAIN}" -P "${{ secrets.CSC_KEY_PASSWORD }}" -T /usr/bin/codesign

          security set-key-partition-list -S apple-tool:,apple: -s -k "${{ secrets.CSC_KEY_PASSWORD }}" "${KEY_CHAIN}"

          # Set environment variables for electron-builder
          echo "CSC_LINK=${{ secrets.CSC_LINK }}" >> $GITHUB_ENV
          echo "CSC_KEY_PASSWORD=${{ secrets.CSC_KEY_PASSWORD }}" >> $GITHUB_ENV
          echo "APPLE_ID=${{ secrets.APPLE_ID }}" >> $GITHUB_ENV
          echo "APPLE_APP_SPECIFIC_PASSWORD=${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" >> $GITHUB_ENV
          echo "APPLE_TEAM_ID=${{ secrets.APPLE_TEAM_ID }}" >> $GITHUB_ENV

          # Build with electron-builder
          npm run dist:macArm
          rm -fr *.p12

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: builds/*.dmg 